A version of the ALFRED implementation released under the Apache License 2.0
served as the foundation for this k-mismatch shortest unique substring (sus)
finding implementation. The current homepage of that project is here:
https://alurulab.cc.gatech.edu/phylo

This project has destructively modified that project's source, adapting it to
instead calculate the rightmost k-mismatch shortest unique substring for each
index in a given input sequence.

# Installation

## Dependencies
### External Dependencies that need to be installed
* A modern, C++11 ready compiler such as `g++` version 4.8 or higher or `clang` version 3.2 or higher.
* The [cmake](www.cmake.org) build system (Version >= 2.8.11).
* A 64-bit operating system. Either Mac OS X or Linux are currently supported.
* A cmake supported threading library (pthread).

### Dependencies included each with their own respective licenses found in their
directories:
libdivsufsort, under ext/libdivsufsort/
googletest, under ext/googletest/
sdsl, under src/sdsl/

## Compilation

Create a build directory. For example,

     mkdir build
     cd build

Configure and build the executable 'k_mismatch_sus_finding.x'. Continuing the example,

     cmake ..
     make

If successfully built, k_mismatch_sus_finding.x should be available in the build directory.

# Usage

## Preparing Input

Place the input sequence into a single fasta file. Also, make sure that the
input file has one of 'fasta' or 'fa' or 'fas' file extension. Note that the
program accepts only sequences with valid DNA or protein alphabets. An example
is as shown below.

    >SeqName
    ACGTTAGAGTAAATGGAGTAGAAT

## Compute start and ending index for the rightmost k-mismatch sus for each
index in the input sequence

    build/k_mismatch_sus_finding.x -f input.fas -o something.out -k 3 -p

Note that currently the output will always be sent to a file called a_b.out, and
the format will be such that each line contains the start and end index of the
rightmost k-mismatch sus for the index of the input sequence that corresponds to
the line number. Output may also be sent to the specified output file
(something.out in the example) but this can be ignored and will be cleaned up in
a future release.
